name: Train (pytorch) FFN Model for FF
description: Compiles and trains (pytorch) the FFN model using the training dataset and saves the trained model.
inputs:
  - {name: ff_model, type: Model}
  - {name: train_dataset, type: Dataset}
outputs:
  - {name: trained_model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch torchvision --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |        
        import torch
        import torch.nn as nn
        import torch.nn.functional as F
        import argparse
        import pickle
        import os

        class FFDense(nn.Module):
            def __init__(self, in_features, out_features, threshold=1.5, lr=0.03, epochs=50):
                super().__init__()
                self.linear = nn.Linear(in_features, out_features)
                self.relu = nn.ReLU()
                self.threshold = threshold
                self.lr = lr
                self.epochs = epochs
                self.optimizer = torch.optim.Adam(self.parameters(), lr=self.lr)

            def forward(self, x):
                x_norm = torch.norm(x, dim=1, keepdim=True) + 1e-4
                x_dir = x / x_norm
                return self.relu(self.linear(x_dir))

            def forward_forward(self, x_pos, x_neg):
                g_pos = torch.mean(self.forward(x_pos)**2, dim=1)
                g_neg = torch.mean(self.forward(x_neg)**2, dim=1)
                loss = torch.log(1 + torch.exp(torch.cat([-g_pos + self.threshold, g_neg - self.threshold])))
                loss = loss.mean()
                self.optimizer.zero_grad()
                loss.backward()
                self.optimizer.step()                         
                return self.forward(x_pos).detach(), self.forward(x_neg).detach(), loss.item()


        class FFNetwork(nn.Module):
            def __init__(self, dims, threshold=1.5, lr=0.03, epochs=50):
                super().__init__()
                self.layers = nn.ModuleList([
                    FFDense(dims[i], dims[i+1], threshold=threshold, lr=lr, epochs=epochs)
                    for i in range(len(dims) - 1)
                ])

            def overlay_y_on_x(self, x, y):
                # Assumes x is [B, 784], y is [B]
                max_vals = x.max(dim=1, keepdim=True).values
                updates = torch.zeros_like(x)
                updates[range(len(y)), y] = max_vals.squeeze()
                return x + updates

            def forward_forward_pass(self, x, y):
                x_pos = self.overlay_y_on_x(x.clone(), y)
                y_shuffled = y[torch.randperm(len(y))]
                x_neg = self.overlay_y_on_x(x.clone(), y_shuffled)

                h_pos, h_neg = x_pos, x_neg
                losses = []
                for layer in self.layers:
                    h_pos, h_neg, loss = layer.forward_forward(h_pos, h_neg)
                    losses.append(loss)
                return sum(losses) / len(losses)

        parser = argparse.ArgumentParser()
        parser.add_argument('--ff_model', type=str, required=True)
        parser.add_argument('--train_dataset', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        args = parser.parse_args()

        # Load untrained model
        model = FFNetwork([784, 500, 500])
        model.load_state_dict(torch.load(args.ff_model))

        # Load train dataset (expects pickle with tensors)
        with open(args.train_dataset, 'rb') as f:
            x_train, y_train = pickle.load(f)  # Expect x: [N, 784], y: [N]
        x_train = torch.tensor(x_train, dtype=torch.float32)
        y_train = torch.tensor(y_train, dtype=torch.long)

        dataset = torch.utils.data.TensorDataset(x_train, y_train)
        dataloader = torch.utils.data.DataLoader(dataset, batch_size=50000, shuffle=True)

        model.train()
        for epoch in range(20):
            total_loss = 0
            for x_batch, y_batch in dataloader:
                loss = model.forward_forward_pass(x_batch, y_batch)
                total_loss += loss
            avg_loss = total_loss / len(dataloader)
            print(f"Epoch {epoch + 1} - Avg Loss: {avg_loss:.4f}")

        # Save trained model
        os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
        torch.save(model.state_dict(), args.trained_model)
    args:
      - --ff_model
      - {inputPath: ff_model}
      - --train_dataset
      - {inputPath: train_dataset}
      - --trained_model
      - {outputPath: trained_model}
