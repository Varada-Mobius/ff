name: Preprocess MNIST JSON Dataset
description: Converts MNIST-style JSON data into TensorFlow train/test datasets

inputs:
  - {name: json_data, type: Dataset}

outputs:
  - {name: x_train, type: Dataset}
  - {name: x_test, type: Dataset}
  - {name: y_train, type: Dataset}
  - {name: y_test, type: Dataset}
  - {name: train_dataset, type: Dataset}
  - {name: test_dataset, type: Dataset}

implementation:
  container:
    image: python:3.8
    command:
      - sh
      - -c
      - |
        python3 -m pip install --quiet numpy tensorflow scikit-learn
        exec python3 -u - "$@"
      - |
        import json
        import numpy as np
        import tensorflow as tf
        import argparse

        parser = argparse.ArgumentParser()
        parser.add_argument('--json_data', required=True)
        parser.add_argument('--x_train_out', required=True)
        parser.add_argument('--x_test_out', required=True)
        parser.add_argument('--y_train_out', required=True)
        parser.add_argument('--y_test_out', required=True)
        parser.add_argument('--train_dataset', required=True)
        parser.add_argument('--test_dataset', required=True)
        args = parser.parse_args()

        # Load JSON
        with open(args.json_data, "r") as f:
            data = json.load(f)

        # Extract train and test samples
        train_samples = data["splits"]["train"]["samples"]
        test_samples = data["splits"]["test"]["samples"]

        def extract_xy(samples):
            x = []
            y = []
            for s in samples:
                features = s["features"]
                label = s["label"]
                x.append(features)
                y.append(label)
            x = np.array(x, dtype=np.float32)
            y = np.array(y, dtype=np.int32)
            return x, y

        # Convert to arrays
        x_train, y_train = extract_xy(train_samples)
        x_test, y_test = extract_xy(test_samples)

        # Normalize
        if x_train.max() > 1.0:
            x_train /= 255.0
            x_test /= 255.0

        # Flatten if needed
        if x_train.ndim > 2:
            x_train = x_train.reshape((x_train.shape[0], -1))
            x_test = x_test.reshape((x_test.shape[0], -1))

        # Save .npy outputs
        np.save(args.x_train_out, x_train)
        np.save(args.x_test_out, x_test)
        np.save(args.y_train_out, y_train)
        np.save(args.y_test_out, y_test)

        # Create batched TF datasets
        train_ds = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(len(x_train))
        test_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(len(x_test))

        tf.data.experimental.save(train_ds, args.train_dataset)
        tf.data.experimental.save(test_ds, args.test_dataset)

        print(f"Processed {len(x_train)} train and {len(x_test)} test samples.")

    args:
      - --json_data
      - {inputPath: json_data}
      - --x_train_out
      - {outputPath: x_train}
      - --x_test_out
      - {outputPath: x_test}
      - --y_train_out
      - {outputPath: y_train}
      - --y_test_out
      - {outputPath: y_test}
      - --train_dataset
      - {outputPath: train_dataset}
      - --test_dataset
      - {outputPath: test_dataset}
